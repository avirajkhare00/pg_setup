name: Deploy PostgreSQL Infrastructure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_key_name: ${{ secrets.SSH_KEY_NAME }}
      TF_VAR_ssh_private_key_path: '/tmp/ssh_key.pem'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.5.0'

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Format
      run: |
        cd terraform
        terraform fmt -check

    - name: Terraform Validate
      run: |
        cd terraform
        terraform validate

    - name: Create Terraform Workspace
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: |
        cd terraform
        # Create a new workspace named after the commit SHA
        terraform workspace new ${GITHUB_SHA:0:8} || terraform workspace select ${GITHUB_SHA:0:8}

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -out=tfplan
      if: github.event_name == 'pull_request'

    - name: Terraform Apply
      id: apply
      run: |
        cd terraform
        terraform apply -auto-approve
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      continue-on-error: true

    - name: Terraform Rollback
      if: steps.apply.outcome == 'failure' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      run: |
        cd terraform
        echo "Terraform apply failed, rolling back changes..."
        terraform destroy -auto-approve
        echo "Rollback completed."

    - name: Save SSH key
      run: |
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/ssh_key.pem
        chmod 600 /tmp/ssh_key.pem
      if: steps.apply.outcome == 'success' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')

    - name: Wait for instance to be ready
      run: |
        sleep 60
      if: steps.apply.outcome == 'success' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')

    - name: Upload Terraform state
      uses: actions/upload-artifact@v3
      with:
        name: terraform-state
        path: terraform/terraform.tfstate
      if: steps.apply.outcome == 'success' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')

  ansible:
    name: 'Ansible'
    runs-on: ubuntu-latest
    needs: terraform
    if: needs.terraform.result == 'success' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Download Terraform state
      uses: actions/download-artifact@v3
      with:
        name: terraform-state
        path: terraform/

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible

    - name: Save SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Get S3 bucket name
      run: |
        if [ -f terraform/terraform.tfstate ]; then
          echo "PG_BACKUP_BUCKET=$(cat terraform/terraform.tfstate | jq -r '.outputs.pg_backup_bucket.value')" >> $GITHUB_ENV
          echo "SERVER_IP=$(cat terraform/terraform.tfstate | jq -r '.outputs.pg_server_public_ip.value')" >> $GITHUB_ENV
          echo "Found Terraform state file. Server IP: $SERVER_IP, S3 Bucket: $PG_BACKUP_BUCKET"
        else
          echo "Error: terraform.tfstate file not found"
          exit 1
        fi

    - name: Add SSH known hosts
      run: |
        ssh-keyscan -t rsa ${{ env.SERVER_IP }} >> ~/.ssh/known_hosts
        echo "Added ${{ env.SERVER_IP }} to known hosts"

    - name: Run Ansible Playbook
      run: |
        cd ansible
        echo "Checking inventory file..."
        if [ -f inventory/hosts ]; then
          cat inventory/hosts
        else
          echo "Error: Ansible inventory file not found"
          exit 1
        fi
        
        echo "Running Ansible playbook with S3 bucket: ${{ env.PG_BACKUP_BUCKET }}"
        ANSIBLE_HOST_KEY_CHECKING=False PG_BACKUP_BUCKET=${{ env.PG_BACKUP_BUCKET }} ansible-playbook -i inventory/hosts playbook.yml -v
